{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "AirScript",
	"patterns": [
		{
			"include":"#definition"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#type"
		},
		{
			"include": "#register"
		},
		{
			"include": "#modifier"
		},
		{
			"include": "#field"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#number"
		},
		{
			"include": "#operator"
		},
		{
			"include": "#function-call"
		},
		{
			"include": "#identifier"
		}
	],
	"repository": {
		"keyword": {
			"patterns": [{
				"name": "keyword.control.flow.airscript",
				"match": "\\b(for (each|all)?|init|when|else|yield|cycle|enforce)\\b"
			},{
				"name": "support.type.airscript",
				"match": "\\b(steps?|input)\\b"
			}]
		},
		"definition":{
			"patterns": [
				{
					"include":"#transition-definition"	
				},
				{
					"include":"#constraint-definition"	
				},
				{
					"include": "#stark-definition"
				}
			]
		},
		"transition-definition":{
			"patterns": [
				{
					"match":"\\b(transition)\\s([1-9]|\\d\\d\\d*)\\s(registers?)\\b",
					"captures": {
						"1":{
							"name":"keyword.other.airscript"
						},
						"2":{
							"name":"constant.numeric.airscript"
						},
						"3":{
							"name":"support.type.airscript"
						}
					}
				}
			]
		},
		"constraint-definition":{
			"patterns": [
				{
					"match":"\\b(enforce)\\s([1-9]|\\d\\d\\d*)\\s(constraints?)\\b",
					"captures": {
						"1":{
							"name":"keyword.other.airscript"
						},
						"2":{
							"name":"constant.numeric.airscript"
						},
						"3":{
							"name":"support.type.airscript"
						}
					}
				}
			]
		},
		"stark-definition":{
			"patterns": [
				{
					"match":"\\b(define)\\s([_$[:alpha:]][_$[:alnum:]]*)\\s(over)\\s(prime\\sfield)\\b",
					"captures": {
						"1":{
							"name":"keyword.other.airscript"
						},
						"2":{
							"name":"variable.other.airscript"
						},
						"3":{
							"name": "keyword.other.airscript"
						},
						"4":{
							"name":"support.type.airscript"
						}
					}
				}
			]
		},
		"function-call":{
			"patterns": [
				{
					"name":"entity.name.function",
					"match": "\\b([_$[:alpha:]][_$[:alnum:]]*)\\("
				}
			]
		},
		"register": {
			"patterns": [{
				"name": "constant.language.registers.airscript",
				"match": "(\\$r[0-9]*|\\$n[0-9]*)"
			}]
		},
		"modifier": {
			"patterns": [{
				"name": "storage.modifier.airscript",
				"match": "\\b(const|static|public|secret)\\b"
			}]
		},
		"field": {
			"patterns": [{
				"name": "support.type.airscript",
				"match": "\\bprime field\\b"
			}]
		},
		"type": {
			"patterns": [{
				"name": "storage.type.airscript",
				"match": "\\b(boolean|element)\\b"
			}]
		},
		"comment": {
            "patterns": [
                {
                    "include": "#comment-line"
                }
            ]
        },
        "comment-line": {
            "match": "(?<!tp:)//.*?$",
            "name": "comment.line.airscript"
		},
		"number": {
            "patterns": [
                {
                    "include": "#number-decimal"
                }
            ]
        },
        "number-decimal": {
            "match": "\\b(\\d+(\\.\\d+)?)\\b",
            "name": "constant.numeric.decimal.airscript"
		},
		"operator": {
            "patterns": [
                {
                    "include": "#operator-arithmetic"
                },
                {
                    "include": "#operator-assignment"
                }
            ]
        },
        "operator-arithmetic": {
            "match": "(#|\\^|\\+|\\-|\\/|\\*)",
            "name": "keyword.operator.arithmetic.airscript"
        },
        "operator-assignment": {
            "match": "(<\\-|:)",
            "name": "keyword.operator.assignment.airscript"
		},
		"identifier":{
			"patterns":[
				{
					"name": "variable.other.airscript",
					"match": "(?x)([_$[:alpha:]][_$[:alnum:]]*)"
				}
			]
		}
	},
	"scopeName": "source.airscript"
}